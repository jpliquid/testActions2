<launch>
  <!-- Vehicle namespace -->
  <arg name="uuv_name"/>
  <!-- Flag set as true to use load controller the parameters from the file  -->
  <arg name="use_params_file" default="false"/>
  <!-- Flag to start the trajectory visual markers publisher -->
  <arg name="gui_on" default="true"/>
  <!--
    Set this flag to true to compute both reference and error vectors wrt
    world_ned frame
  -->
  <arg name="use_ned_frame" default="false"/>

  <arg name="max_forward_speed" default="2"/>
  <arg name="dubins_radius" default="10"/>
  <arg name="dubins_max_pitch" default="0.09"/>
  <arg name="min_thrust" default="70"/>
  <arg name="max_thrust" default="200"/>
  <arg name="thruster_topic" default="thrusters/id_0/input"/>
  <arg name="thrust_p_gain" default="1"/>
  <arg name="thrust_d_gain" default="1"/>
  <arg name="gain_roll" default="1"/>
  <arg name="gain_pitch" default="1"/>
  <arg name="gain_yaw" default="1"/>
  <arg name="n_fins" default="4"/>
  <arg name="map_roll" default="0,0,0,0"/>
  <arg name="map_pitch" default="0,0,0,0"/>
  <arg name="map_yaw" default="0,0,0,0"/>
  <arg name="max_fin_angle" default="0.0"/>
  <arg name="fin_topic_prefix" default="fins"/>
  <arg name="fin_topic_suffix" default="input"/>
  <arg name="idle_radius" default="10.0"/>
  <arg name="look_ahead_delay" default="5.0"/>
  <arg name="desired_pitch_limit" default="0.26"/>
  <arg name="yaw_error_limit" default="1.0"/>

  <!-- Thruster configuration -->
  <arg name="thruster_topic_prefix" default="thrusters" />
  <arg name="thruster_topic_suffix" default="input" />
  <arg name="thruster_frame_base" default="thruster_" />  
  <arg name="thruster_conversion_fcn" default="proportional" />
  <!-- For proportional thruster model: gain * rotor_ang_vel * |rotor_ang_vel| -->
  <arg name="thruster_gain" default="0.0"/>
  <!-- For custom thruster model: interpolation of input to output -->
  <arg name="thruster_input" default="0,1,2,3"/>
  <arg name="thruster_output" default="0,1,2,3"/>

  <!-- This node just reads the trajectory and waypoint topics and publishes
       visualization markers for RViz -->
  <group if="$(var gui_on)">
    <group>
      <push-ros-namespace namespace="$(var uuv_name)"/>
      <node pkg="uuv_control_utils"
            type="trajectory_marker_publisher.py"
            node-name="trajectory_marker_publisher"
            output="screen"/>
    </group>
  </group>

    <group>
      <push-ros-namespace namespace="$(var uuv_name)"/>
      <node pkg="uuv_trajectory_control"
            exec="auv_geometric_tracking_controller.py"
            node-name="auv_geometric_tracking_controller"
            output="screen"
            unless="$(var use_ned_frame)">
        <remap from="odom" to="pose_gt"/>

        <param name="max_forward_speed" value="$(var max_forward_speed)"/>
        <param name="base_link" value="base_link"/>
        <param name="is_underactuated" value="true"/>
        <param name="inertial_frame_id" value="world"/>
        <param name="min_thrust" value="$(var min_thrust)"/>
        <param name="max_thrust" value="$(var max_thrust)"/>
        <param name="thruster_topic" value="$(var thruster_topic)"/>
        <param name="thrust_p_gain" value="$(var thrust_p_gain)"/>
        <param name="thrust_d_gain" value="$(var thrust_d_gain)"/>
        <param name="gain_roll" value="$(var gain_roll)"/>
        <param name="gain_pitch" value="$(var gain_pitch)"/>
        <param name="gain_yaw" value="$(var gain_yaw)"/>
        <param name="n_fins" value="$(var n_fins)"/>
        <param name="map_roll" value="[$(var map_roll)]"/>
        <param name="map_pitch" value="[$(var map_pitch)]"/>
        <param name="map_yaw" value="[$(var map_yaw)]"/>
        <param name="fin_topic_prefix" value="$(var fin_topic_prefix)"/>
        <param name="fin_topic_suffix" value="$(var fin_topic_suffix)"/>
        <param name="max_fin_angle" value="$(var max_fin_angle)"/>
        <param name="idle_radius" value="$(var idle_radius)"/>
        <param name="look_ahead_delay" value="look_ahead_delay"/>
        <param name="desired_pitch_limit" value="$(var desired_pitch_limit)"/>
        <param name="yaw_error_limit" value="$(var yaw_error_limit)"/>
        <param name="dubins">
          <param name="radius" value="$(var dubins_radius)"/>
          <param name="max_pitch" value="$(var dubins_max_pitch)"/>
        </param>
        <param name="thruster_config">
          <param name="topic_prefix" value="$(var thruster_topic_prefix)"/>
          <param name="topic_suffix" value="$(var thruster_topic_suffix)"/>
          <param name="frame_base" value="$(var thruster_frame_base)"/>
          <param name="max_thrust" value="$(var max_thrust)"/>
          <param name="conversion_fcn" value="$(var thruster_conversion_fcn)"/>
          <param name="conversion_fcn_params">
            <param name="gain" value="$(var thruster_gain)"/>
            <param name="input" value="[$(var thruster_input)]"/>
            <param name="output" value="[$(var thruster_output)]"/>
          </param>
        </param>

        <!-- <rosparam subst_value="true">
          max_forward_speed: $(arg max_forward_speed)
          base_link: base_link
          is_underactuated: true
          inertial_frame_id: world
          min_thrust: $(arg min_thrust)
          max_thrust: $(arg max_thrust)
          thruster_topic: $(arg thruster_topic)
          thrust_p_gain: $(arg thrust_p_gain)
          thrust_d_gain: $(arg thrust_d_gain)
          gain_roll: $(arg gain_roll)
          gain_pitch: $(arg gain_pitch)
          gain_yaw: $(arg gain_yaw)
          n_fins: $(arg n_fins)
          map_roll: [$(arg map_roll)]
          map_pitch: [$(arg map_pitch)]
          map_yaw: [$(arg map_yaw)]
          fin_topic_prefix: $(arg fin_topic_prefix)
          fin_topic_suffix: $(arg fin_topic_suffix)
          max_fin_angle: $(arg max_fin_angle)
          idle_radius: $(arg idle_radius)
          look_ahead_delay: look_ahead_delay
          desired_pitch_limit: $(arg desired_pitch_limit)
          yaw_error_limit: $(arg yaw_error_limit)
          dubins:
              radius: $(arg dubins_radius)
              max_pitch: $(arg dubins_max_pitch)
          thruster_config:
              topic_prefix: $(arg thruster_topic_prefix)
              topic_suffix: $(arg thruster_topic_suffix)
              frame_base: $(arg thruster_frame_base)
              max_thrust: $(arg max_thrust)
              conversion_fcn: $(arg thruster_conversion_fcn)
              conversion_fcn_params:
                  gain: $(arg thruster_gain)
                  input: [$(arg thruster_input)]
                  output: [$(arg thruster_output)]
        </rosparam>-->
      </node>

      <node pkg="uuv_trajectory_control"
            exec="auv_geometric_tracking_controller.py"
            node-name="auv_geometric_tracking_controller"
            output="screen"
            if="$(var use_ned_frame)">
        <remap from="odom" to="pose_gt_ned"/>

        <param name="max_forward_speed" value="$(var max_forward_speed)"/>
        <param name="base_link" value="base_link_ned"/>
        <param name="is_underactuated" value="true"/>
        <param name="inertial_frame_id" value="world_ned"/>
        <param name="min_thrust" value="$(var min_thrust)"/>
        <param name="max_thrust" value="$(var max_thrust)"/>
        <param name="thruster_topic" value="$(var thruster_topic)"/>
        <param name="thrust_gain" value="$(var thrust_gain)"/>
        <param name="gain_roll" value="$(var gain_roll)"/>
        <param name="gain_pitch" value="$(var gain_pitch)"/>
        <param name="gain_yaw" value="$(var gain_yaw)"/>
        <param name="n_fins" value="$(var n_fins)"/>
        <param name="map_roll" value="[$(var map_roll)]"/>
        <param name="map_pitch" value="[$(var map_pitch)]"/>
        <param name="map_yaw" value="[$(var map_yaw)]"/>
        <param name="fin_topic_prefix" value="$(var fin_topic_prefix)"/>
        <param name="fin_topic_suffix" value="$(var fin_topic_suffix)"/>
        <param name="max_fin_angle" value="$(var max_fin_angle)"/>
        <param name="idle_radius" value="$(var idle_radius)"/>
        <param name="look_ahead_delay" value="$(var look_ahead_delay)"/>
        <param name="desired_pitch_limit" value="$(var desired_pitch_limit)"/>
        <param name="yaw_error_limit" value="$(var yaw_error_limit)"/>
        <param name="dubins">
          <param name="radius" value="$(var dubins_radius)"/>
          <param name="max_pitch" value="$(var dubins_max_pitch)"/>
        </param>
        <param name="thruster_config">
          <param name="topic_prefix" value="$(var thruster_topic_prefix)"/>
          <param name="topic_suffix" value="$(var thruster_topic_suffix)"/>
          <param name="frame_base" value="$(var thruster_frame_base)"/>
          <param name="max_thrust" value="$(var max_thrust)"/>
          <param name="conversion_fcn" value="$(var thruster_conversion_fcn)"/>
          <param name="conversion_fcn_params">
            <param name="gain" value="$(var thruster_gain)"/>
            <param name="input" value="[$(var thruster_input)]"/>
            <param name="output" value="[$(var thruster_output)]"/>
          </param>
        </param>

        <!-- <rosparam subst_value="true">
          max_forward_speed: $(arg max_forward_speed)
          base_link: base_link_ned
          is_underactuated: true
          inertial_frame_id: world_ned
          min_thrust: $(arg min_thrust)
          max_thrust: $(arg max_thrust)
          thruster_topic: $(arg thruster_topic)
          thrust_gain: $(arg thrust_gain)
          gain_roll: $(arg gain_roll)
          gain_pitch: $(arg gain_pitch)
          gain_yaw: $(arg gain_yaw)
          n_fins: $(arg n_fins)
          map_roll: [$(arg map_roll)]
          map_pitch: [$(arg map_pitch)]
          map_yaw: [$(arg map_yaw)]
          fin_topic_prefix: $(arg fin_topic_prefix)
          fin_topic_suffix: $(arg fin_topic_suffix)
          max_fin_angle: $(arg max_fin_angle)
          idle_radius: $(arg idle_radius)
          look_ahead_delay: $(arg look_ahead_delay)
          desired_pitch_limit: $(arg desired_pitch_limit)
          yaw_error_limit: $(arg yaw_error_limit)
          dubins:
              radius: $(arg dubins_radius)
              max_pitch: $(arg dubins_max_pitch)
          thruster_config:
              topic_prefix: $(arg thruster_topic_prefix)
              topic_suffix: $(arg thruster_topic_suffix)
              frame_base: $(arg thruster_frame_base)
              max_thrust: $(arg max_thrust)
              conversion_fcn: $(arg thruster_conversion_fcn)
              conversion_fcn_params:
                  gain: $(arg thruster_gain)
                  input: [$(arg thruster_input)]
                  output: [$(arg thruster_output)]
        </rosparam>  -->
      </node>
    </group>

</launch>
